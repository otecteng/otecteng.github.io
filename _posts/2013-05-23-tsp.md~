---
layout: default
title: 商旅问题(TSP)的实际应用
---

##{{ page.title }}  
<br/>

###系统要求  
工人接到一张表格，上面列出N个路口，要求第二天从公司出发，去这些路口检修设备，工人对道路不熟悉，希望能够帮助他规划一条路线以便最快完成任务。 
![ui](/images/xmap_1.png)

###解决方案
这是典型的TSP问题，但是事先要获取路口的位置信息和路口之间的距离，考虑到城市交通限制，路口之间距离不能以简单的平面距离计算。任务分解为以下过程：
* 1)获取路口位置信息
* 2)计算路口间距离矩阵
* 3)TSP求解
* 4)业务表达：在地图上标注所有点位,动态演示最优路径的行走过程,打印地图，打印最优路径

###解决过程：
a)根据路名查找路口位置，获取经纬度坐标：测试了Google和Baidu的Map API，Google查询较方便，但是考虑Google map和earth采用了不同的坐标系，还是先选用了baidu的接口。但是第二天发现百度查询的结果不准确，差点害人走错路。最后采用Google查询位置，再调用baidu转换接口转换为baidu坐标，顺便学习了一下坐标系的知识。   
&nbsp;&nbsp;[Google位置查询](https://maps.googleapis.com/maps/api/place/nearbysearch)  
&nbsp;&nbsp;[坐标转换,google to baidu](http://api.map.baidu.com/ag/coord/convert)  
<br>
b)计算路口间距离矩阵：由于baidu的DirectionAPI还在敬请期待，先采用JavaScriptAPI，再对返回文本分析后再发送最后的查询，获取两点间距离。NxN次计算后获得距离矩阵。目前计算还是单线程的，70个点很慢啦，后面会试试看多线程查询。    
&nbsp;&nbsp;[direction](http://api.map.baidu.com/direction)  
&nbsp;&nbsp;[重定向后的查询page:map.baidu.com](http://map.baidu.com/),没错，就是它  
<br>
c)TSP求解：先采用[ai4r](http://ai4r.org/)的GA库计算，第一次对于70个点的模拟结果感觉尚可，但在几天后的20点的数据计算结果非常差，最终产生的结果大约是实际最优解的2倍，跟踪下来bestfit几乎不变化，估计问题出在selection上，还得去问问ai4r的兄弟们原因。使用同样的数据集对[Aforege](http://www.aforgenet.com)进行了测试，200X1000的配置基本已经接近最优解了。于是提供了windows版的路径规划工具，手工运行得出结果后更新任务的最优路径数据。  
<br>
d).外层业务表达：  
*	baidu map JavaScriptAPI的Marker，耍了个花招，把icon的size设成0,这样标注文字框的左上角可以对准路口，这一点对使用者来说很重要。
*	baidu map JavaScriptAPI的Polyline，需要在setTimeout对自己回调，产生行走效果
*	两个选择：static-map接口和js原生的print，选择了方案2，这个步骤中发现addoverlay如果发生在canvas区域外部时，print在计算打印区域时会算上，因此对标注显示做了调整，进标注显示范围内的路口。


